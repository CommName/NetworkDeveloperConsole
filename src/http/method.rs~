use std::str::FromStr;
use serde::Deserialize;
use serde::de::{value, IntoDeserializer};

#[derive(Deserialize, Debug, Clone)]
pub enum Method{
    Options,
    Get,
    Head,
    Post,
    Put,
    Delete,
    Trace,
    Connect
}

impl FromStr for Method {
    type Err = value::Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
	Self::deserialize(s.into_deserializer())
    }
}

pub struct MethodParser<'a> {
    bytes: &'a [u8]
	
}

impl<'a> MethodParser<'a> {

    pub fn new(bytes: &'a[u8]) -> Self {
	Self {
	    bytes: bytes
	}
    }

    pub fn parse(self) -> Result<Method, String> {
	println!("{:?}", &self.bytes);
	let index = self.bytes.iter().position(|x| *x == (' ' as u8)).ok_or("Error deserializing".to_string())?;

	let s =std::str::from_utf8(&self.bytes[..index]).unwrap(); 
	Method::from_str(s).map_err(|_| "error".to_string())
    }
}

